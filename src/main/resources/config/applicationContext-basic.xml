<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
http://www.springframework.org/schema/context   
http://www.springframework.org/schema/context/spring-context-3.0.xsd  
http://www.springframework.org/schema/aop  
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
http://www.springframework.org/schema/tx  
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
">

    <context:annotation-config/>
    <context:component-scan base-package="works.tonny.apps"/>
    <bean
            class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:apps.properties"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
    </bean>

    <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"
          lazy-init="true"/>

    <bean id="dataSource" name="dataSource"
          class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${db.driverClass}"/>
        <property name="jdbcUrl" value="${db.url}"/>
        <property name="user" value="${db.user}"/>
        <property name="password" ref="databasePassword"/>
        <property name="initialPoolSize" value="${db.initialPoolSize}"/>
        <property name="minPoolSize" value="${db.initialPoolSize}"/>
        <property name="maxPoolSize" value="${db.maxPoolSize}"/>
        <property name="maxIdleTime" value="120000"/>
        <property name="acquireIncrement" value="2"/>
        <property name="idleConnectionTestPeriod" value="30"/>
        <property name="acquireRetryAttempts" value="30"/>
        <property name="breakAfterAcquireFailure" value="false"/>
        <property name="testConnectionOnCheckout" value="true"/>
        <property name="preferredTestQuery" value="${db.testQuery}"/>
    </bean>


    <bean id="sessionFactoryManager"
          class="works.tonny.apps.deploy.AnnotationSessionFactoryManagerFactory">
        <property name="writeDataSource" value="dataSource"/>
        <!-- property name="readDataSource" value="readDataSource" / -->
        <property name="lobHandler" ref="lobHandler"/>
        <property name="schemaService" ref="schemaManager"/>
        <!-- -->
        <property name="mappingLocations">
            <list>
                <value>classpath*:orm/**/*.hbm.xml</value>
            </list>
        </property>
        <property name="mappingPackages">
            <list>
                <value>works.tonny.apps</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.cache.provider_class">
                    org.hibernate.cache.EhCacheProvider
                </prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">false</prop>
                <prop key="hibernate.poolPreparedStatements">true</prop>
                <prop key="hibernate.query.substitutions">true 1, false 0, yes 'Y', no 'N'</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.default_schema">${db.id}</prop>
                <prop key="hibernate.query.imports">net.sf.hibernate.test, net.sf.hibernate.eg</prop>
                <prop key="hibernate.dialect">${db.dialect}</prop>
                <prop key="hibernate.jdbc.fetch_size">50</prop>
                <prop key="hibernate.proxool.pool_alias">pool1</prop>
                <prop key="hibernate.use_outer_join">true</prop>
                <prop key="hibernate.jdbc.use_streams_for_binary">true</prop>
                <prop key="hibernate.jdbc.batch_size">0</prop>
                <prop key="hibernate.use_query_cache">true</prop>
                <prop key="hibernate.generate_statistics">true</prop>
                <prop key="hibernate.hbm2ddl.auto">${db.ddl.auto}</prop>
                <prop key="hibernate.show_sql">${db.showsql}</prop>
                <prop key="hibernate.query.factory_class">org.hibernate.hql.classic.ClassicQueryTranslatorFactory
                </prop>
                <prop key="hibernate.statement_cache.size">25</prop>
            </props>
        </property>
    </bean>


    <bean id="tx" class="works.tonny.apps.support.HibernateTransactionManager">
        <property name="factoryManager" ref="sessionFactoryManager"/>
    </bean>
    <tx:annotation-driven transaction-manager="tx"/>
    <!-- <bean id="txInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="tx" /> <property name="transactionAttributes">
        <props> <prop key="save*">PROPAGATION_REQUIRED,-Exception</prop> <prop key="create*">PROPAGATION_REQUIRED,-Exception</prop>
        <prop key="add*">PROPAGATION_REQUIRED,-Exception</prop> <prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
        <prop key="lock*">PROPAGATION_REQUIRED,-Exception</prop> <prop key="unlock*">PROPAGATION_REQUIRED,-Exception</prop>
        <prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop> <prop key="move*">PROPAGATION_REQUIRED,-Exception</prop>
        <prop key="remove*">PROPAGATION_REQUIRED,-Exception</prop> <prop key="*">PROPAGATION_SUPPORTS,readOnly</prop>
        </props> </property> </bean> -->
    <bean
            class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <value>*Service</value>
        </property>
        <property name="interceptorNames">
            <list>
                <!-- value>txInterceptor</value -->
                <value>authVerifyAdvisor</value>
            </list>
        </property>
    </bean>

    <bean id="baseDAO" class="works.tonny.apps.support.SpringHibernateDAO"
          scope="prototype">
        <property name="sessionFactoryManager" ref="sessionFactoryManager"/>
    </bean>
    <bean id="baseDAOSupport" class="works.tonny.apps.support.BaseDAOSupport"
          scope="prototype">
        <property name="dao" ref="baseDAO"/>
        <property name="sqlMappingManager" ref="sqlMappingManager"/>
    </bean>
    <bean id="sqlMappingManager" class="org.llama.library.ComponentFactoryBean">
        <property name="component" value="sql"/>
    </bean>

    <bean id="exceptionManager" class="org.llama.library.ComponentFactoryBean">
        <property name="component" value="exception"/>
    </bean>
    <bean id="commonAction" class="works.tonny.apps.support.CommonAction"
          abstract="true">
        <property name="entityLazyProxy" ref="entityLazyProxyService"/>
    </bean>


    <bean id="abstractDao" class="org.springframework.aop.framework.ProxyFactoryBean"
          abstract="true">
        <property name="interceptorNames">
            <list>
                <value>mybatisAdvisor</value>
                <value>listMethodAdvisor</value>
            </list>
        </property>
    </bean>

    <bean id="mybatisAdvisor" class="works.tonny.apps.mybatis.MybatisAdvisor">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <bean id="listMethodAdvisor" class="works.tonny.apps.support.ListMethodAdvisor"/>

    <bean id="authVerifyAdvisor" class="works.tonny.apps.support.AuthVerifyAdvisor"/>

    <bean id="entityLazyProxyService" class="works.tonny.apps.support.EntityLazyProxyImpl">
        <property name="dao" ref="baseDAOSupport"/>
    </bean>

    <bean id="cryptographyManager" class="org.llama.library.ComponentFactoryBean">
        <property name="component" value="security"/>
    </bean>

    <bean id="cacher" class="org.llama.library.ComponentFactoryBean">
        <property name="component" value="cache"/>
    </bean>

    <bean id="cache" factory-bean="cacher" factory-method="getCache">
        <constructor-arg value="web"/>
    </bean>

    <bean id="passwordDecoder" factory-bean="cryptographyManager"
          factory-method="getDecryptor">
        <constructor-arg value="passwordDecoder"/>
    </bean>

    <bean id="userPasswordEncoder" factory-bean="cryptographyManager"
          factory-method="getEncryptor">
        <constructor-arg value="md5"/>
    </bean>
    <bean id="passwordEncoder" factory-bean="cryptographyManager"
          factory-method="getEncryptor">
        <constructor-arg value="passwordDecoder"/>
    </bean>

    <bean id="passwordProvider" class="works.tonny.apps.util.PasswordProvider">
        <property name="decryptable" ref="passwordDecoder"/>
        <property name="encryptable" ref="passwordDecoder"/>
    </bean>

    <bean id="databasePassword" factory-bean="passwordProvider"
          factory-method="decode">
        <constructor-arg value="${db.password}"/>
    </bean>

    <bean class="works.tonny.apps.support.SpringBeanPostPrcessor"/>

</beans>
